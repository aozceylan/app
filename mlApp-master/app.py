import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
# Notwendige Imports für diesen Abschnitt
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import (
        accuracy_score, precision_score, recall_score, f1_score, roc_auc_score,
        confusion_matrix, classification_report, roc_curve, auc, log_loss
    )
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
import plotly.express as px

import plotly.express as px
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, precision_score, recall_score, f1_score
import os

import base64

st.set_page_config(page_title="ML Workflow", layout="wide")


# İlk önce is_home_page fonksiyonunu kullanmadan önce active_components değişkeninin
# var olduğundan emin olmak için kontrol ekleyelim
if 'active_components' not in st.session_state:
    st.session_state.active_components = {
        "data_import": False,
        "data_visualization": False,
        "select_columns": False,
        "data_sampling": False,
        "modeling": False,
        "evaluation": False,
        "prediction": False 
    }
def display_logo_html(base64_image, width=700):
    html = f"""
        <div style="text-align: center;">
            <img src="data:image/png;base64,{base64_image}" alt="logo" width="{width}">
        </div>
    """
    st.markdown(html, unsafe_allow_html=True)
    
def is_home_page():
    # Eğer hiçbir component aktif değilse veya sadece ana sayfa aktifse
    return not any(st.session_state.active_components.values()) or (
        st.session_state.active_components.get("data_import", False) == False and
        st.session_state.active_components.get("data_visualization", False) == False and
        st.session_state.active_components.get("select_columns", False) == False and
        st.session_state.active_components.get("data_sampling", False) == False and
        st.session_state.active_components.get("modeling", False) == False and
        st.session_state.active_components.get("evaluation", False) == False
    )
def apply_custom_styling():
    home_page = is_home_page()
    top_right_size = "200px" if home_page else "200px"
    top_right_left = "100px" if home_page else "100px"
    
    bottom_left_size = "700px" if home_page else "500px"
    bottom_left_right = "300px" if home_page else "300px"
    
    # f-string kullanarak dinamik değerleri CSS'e ekleyelim
    st.markdown(f"""
     <style>
        /* Daha spesifik CSS seçicileri */
        div[data-testid="stHeader"] {{display: none;}}
        
        .stApp h1,
        .stApp .stMarkdown h1,
        .stApp header h1,
        section[data-testid="stSidebar"] + div h1,
        .main .block-container h1 {{
            color:#007E92 !important;
            text-align: center !important;
            font-size: 2.5rem !important;
            padding: 1rem 0 !important;
        }}
        
        /* Streamlit üst çubuğunu gizlemek */
        header {{
            visibility: hidden;
        }} 

        /* Sayfa üst boşluğunu tamamen kaldır */
        .block-container {{
            padding-top: 0 !important;
            margin-top: 0 !important;
        }}

        /* Logo-Container ile logoyu yukarı kaydırma */
        .logo-container {{
            position: absolute;
            top: -100px;  /* Logo'yu yukarı kaydır */
            left: 0;
            padding: 5px;
            z-index: 1000;
        }}

        /* Global Styling */
        .stApp {{
            background-color: #ffffff; /* Beyaz arka plan */
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }}

        /* Sidebar Styling */
        div[data-testid="stSidebar"] {{
            background-color: #ffffff !important;
            border-right: 2px solid #e0e0e0;
            box-shadow: 2px 0 5px rgba(0,0,0,0.0);
        }}

        .css-1aumxhk {{
            background-color: #ffffff;
        }}

        .stApp {{
            background-image: url("./images/logo2.png");
            background-size: cover;
        }}
        
        .stApp {{
            background-color: rgba(0, 0, 0, 0);  /* Arka planı şeffaf yap */
        }}        

        /* Yatay çizgi */
        .horizontal-line {{
            border-top: 1px solid #333;
            margin: 20px 0;
        }}

        /* Button Styling */
        .stButton>button {{
            background-color: #007E92; /* Buton rengi */
            color: white;
            border-radius: 8px;
            border: none;
            transition: all 0.3s ease;
        }}

        .stButton>button:hover {{
            background-color: #005f6b; /* Hover rengi */
            transform: scale(1.05);
        }}

        /* Header Styling */
        h1, h2, h3, h4, h5, h6 {{
            color: #2c3e50;
            font-weight: 600;
        }}

        /* Card-like containers */
        .stDataFrame, .stTable {{
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            padding: 10px;
            margin-bottom: 20px;
        }}

        /* Chart and Plot Styling */
        .stPlotlyChart {{
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            padding: 10px;
        }}

        /* Metric Styling */
        .stMetric {{
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            padding: 15px;
        }}

        /* Radio and Select Widgets */
        .stRadio, .stSelectbox {{
            background-color: white;
            border-radius: 8px;
            padding: 10px;
        }}

        /* Progress and Spinner */
        .stSpinner > div {{
            border-color: #007E92 transparent #007E92 transparent;
        }}

        /* Tabs Styling */
        .stTabs [data-baseweb="tab-list"] {{
            background-color: #f0f2f6;
            border-radius: 10px;
        }}

        .stTabs [data-baseweb="tab"] {{
            color: #2c3e50;
            background-color: transparent;
            transition: all 0.3s ease;
        }}

        .stTabs [data-baseweb="tab"]:hover {{
            color: #007E92; /* Hover rengi */
        }}

        .stTabs [data-baseweb="tab"][aria-selected="true"] {{
            background-color: #007E92; /* Seçili sekme rengi */
            color: white;
        }}
        
        /* Obere rechte Ecke Dreieck - angepasst nach Seitentyp */
        .top-right-triangle {{
            position: fixed;
            top: 0;
            right: 0;
            width: 0;
            height: 0;
            border-top: {top_right_size} solid #007E92;
            border-left: {top_right_left} solid transparent;
            z-index: 999;
        }}
           
        /* Untere linke Ecke Dreieck - angepasst nach Seitentyp */
        .bottom-left-triangle {{
            position: fixed;
            bottom: 0;
            left: 0; /* right yerine left kullanarak sol tarafa taşıdık */
            width: 0;
            height: 0;
            border-bottom: {bottom_left_size} solid #008E88;
            border-right: {bottom_left_right} solid transparent; /* border-left yerine border-right kullanarak sola hizaladık */
            z-index: 999;
        }}
        
        /* =============== GELİŞMİŞ CSS KODLARI =============== */
        
        /* Multiselect tag'leri için renkleri özelleştirme */
        span[data-baseweb="tag"] {{
            background-color: #007E92 !important;
            color: white !important;
            border-color: #007E92 !important;
        }}

        span[data-baseweb="tag"] span {{
            color: white !important;
        }}

        span[data-baseweb="tag"]:hover {{
            background-color: #005f6b !important;
        }}

        span[data-baseweb="tag"] button {{
            color: white !important;
        }}

        /* Streamlit default checkbox stilini değiştirme */
        [role="checkbox"][data-baseweb="checkbox"] {{
            background-color: #007E92 !important;
        }}
        .st-emotion-cache-1dj3ksd e8lt0n70,
        [role="slider"] {{
        background-color: #008E88 !important; /* İstediğiniz rengi buraya yazın */
        }}
        [data-baseweb="slider"] div[role="slider"] + div div {{
        background-color:#008E88 !important;
        }}
        
        /* Sadece dolgu kısmını hedefle */
        [data-testid="stSlider"] [data-baseweb="slider"] div div div div {{
        background-color: #008E88 !important;
        }}
        /* Hareketli thumb noktasını hedefle */
        [data-testid="stSlider"] [role="slider"] {{
        background-color: #FF5733 !important;
        }}
                .st-emotion-cache-b92z60,
        [data-testid="stSliderThumbValue"] {{
        background-color: #008E88 !important; /* Sayı kutucuğunun arkaplan rengi */
        color: white !important; /* Sayı rengi */
        }}
        /* Checkbox için ek seçiciler */
        [data-testid="stCheckbox"] > div[role="checkbox"] {{
            background-color: #007E92 !important;
            border-color: #007E92 !important;
        }}

        /* Checkbox işaretini beyaz yap */
        [data-testid="stCheckbox"] > div[role="checkbox"] > svg {{
            color: white !important;
        }}

        /* Radio button için ek seçiciler */
        [data-testid="stRadio"] label div[role="radio"][data-checked="true"] {{
            background-color: #007E92 !important;
            border-color: #007E92 !important;
        }}

        [data-testid="stRadio"] label div[role="radio"][data-checked="true"] div {{
            background-color: white !important;
        }}

        /* MultiSelect seçili etiketler için stil */
        div[data-baseweb="select"] > div > div > div > div > div > div span[data-baseweb="tag"] {{
            background-color: #007E92 !important;
            color: white !important;
        }}

        /* MultiSelect etiketlerdeki çarpı işareti */
        div[data-baseweb="select"] > div > div > div > div > div > div span[data-baseweb="tag"] svg {{
            color: white !important;
        }}

        /* MultiSelect etiketleri kenar renkleri */
        div[data-baseweb="select"] > div > div > div > div > div > div span[data-baseweb="tag"] div {{
            border-color: #007E92 !important;
        }}

        /* Açılır oku değiştir */
        div[data-baseweb="select"] > div > div > div:last-child > svg {{
            color: #007E92 !important;
        }}
        
        /* Dropdown ve selectbox stillerini değiştir */
        div[data-baseweb="select"] {{
            font-weight: 400;
        }}

        div[data-baseweb="select"] > div {{
            background-color: white;
            border-color: #007E92;
        }}

        div[data-baseweb="select"]:hover > div {{
            border-color: #005f6b;
        }}

        div[data-baseweb="base-input"] > div {{
            background-color: white;
            border-color: #007E92;
        }}

        div[data-baseweb="base-input"]:hover > div {{
            border-color: #005f6b;
        }}
        .stRadio label div[role="radio"] {{
           border-color: #007E92 !important;
        }}

        .stRadio label div[role="radio"][data-checked="true"] div {{
            background-color: #007E92 !important;
        }}


        /* Checkbox stilini değiştir */
        .stCheckbox > div > div > label > div[role="checkbox"] {{
            border-color: #007E92;
        }}

        .stCheckbox > div > div > label > div[data-checked="true"] {{
            background-color: #007E92;
            border-color: #007E92;
        }}
        
            
        
     </style>
     <div class="top-left-triangle"></div>
     <div class="top-right-triangle"></div>
     <div class="bottom-left-triangle"></div>
     <div class="bottom-right-triangle"></div>
    """, unsafe_allow_html=True)
# Logo kısmını apply_custom_styling fonksiyonundan sonra çağırmalıyız
# Böylece CSS stillemesi doğru şekilde uygulanacaktır
apply_custom_styling()
HEADER_LOGO_BASE64 = "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XTxz89njmv+18N+719Zbb927fuqpp864f9Ots8466b7ebRvyVnrXXXfd5F88bXF5h+7nPVx11VXp+Ctf+UpVK9rz+Q2nHPHnHrXS0Orn2c9+dvWNb3wj+WlDuj/72c9WtRKV/Pd7zuKKG9WV6U+FQqGwEFI38GO7Wk7ohdXzr5cynN/R0x1+ZusgzqOOOqrzqle9Kh3n9wx36KGHdt75znemnticPB7/jXa0pdv/IH/G2TjoFc7v5zic33rCa6E19V6/7nWv65x33nmdV7ziFSksIi15PHkc4TzX4osvnnrrX/ayl3XOOOOMzvvf//7ec+XpEufKK6/c+frXv9456KCDOiuttFLKV6M1evm///3vd2ohMYXVy//e976389WvfjX11DfjCoSXDmHyNDqulZfOEkss0Xn605/eed/73pd6vV/0ohd1Q84fXzM8pJnL/XKRP03/OZF3XNwDjl2LeIwqHX/88Z3nPOc5ya9n3m677dIoC7yriCd37pm75rX4H+TXuSCeKdJYK+6ds88+u/PCF74wvVsYWfi///u/zuWXX55+y1vplVb+YxQifzZEOpSTWllI54wsGI1Afu9mmDztcQ1veMMbOrVi0tlggw1SOmBUSfmJ9En3S17ykk6teHRqxaf1HRZX3CguKEpFoVAoLISEoDaOC/LjnKafSRw0Io4Jq0ceeWTnla98ZTrf9IcPfvCDnd122y1N00Dup+k3P87Jz0cDloefxOX4/c1vfjMJVuutt17P+b3xxhunaSIwFenwww/vPOYxj0lh8sY0eMc73jEjDm799ddPQiKhONh1110722677Yy0ODa95zOf+UwS8mFqz1vf+tbOU57ylM5aa63VWXvttTtPfepTU/hrrrkm+TH15thjj00KUPPZEOdM5SFkNtNGYbrggguSH9O4pJNQGggfceTxx3EIFuEvXBDH+bmg7Rzy97zUUkulPCGg44tf/GIShikU4W+PPfaY79m8PwptcPDBB8/3juXdTjvtNON+Qb/0em+HHXZYZ7HFFkvnvva1r3We97znddZZZ53kvKNnP/vZnVNOOSVdJ9Tzn7/vtvtQEL773e92LrzwwqRgUECRp60ZPo8nUD4POOCA9H3ipJNOSu85yo//yjUlGQ95yEM6H/nIR9L0McR9iituVKeMpnJa/ygUCoXCQkA+/amuoMd2wnGmP7Vh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YYUVqlogTf68i/XXX3/Gdc77v+yyy5IfXH311dV2221Xrbjiij0/yy23XLXttttWtaDd9VVVv/jFL6plllkmXfdOI85aaKxuvPHG5Oeiiy6qHv/4x1ePfexje+5JT3pS9YIXvKA6/fTTkx947+9617tS+La8UIb++c9/dn3PKx+rr756z693te6661ZnnXVW10dVXXDBBdXiiy+erufpqxXVro+q2nTTTXv3aLpHP/rR1eWXX971WVXHHXdcVQvL6VpbGsORAYJawE/n+O8XRr4Gp512WjoX/iPMG97whq6PedTKXLX22mtXtbCfrt/tbndL+XrUUUdV//73v7u+qqpW2lvjqxWTro+q2nLLLefzw3nn119/fVUrE9Xzn//86phjjkn+b7755lSuIoz/K620UvXLX/4yXccZZ5xRPetZz6qWXHLJdJ1bfvnlq4033rg6//zzu77mlSHlJb9/+C+uuEGuV166Zel2iY/tzW9+c6qkV1111WqHHXaodt1116rWypN7+9vfXu29997VQQcdlBpV7mMf+1h13nnnVb/97W+rP/7xj9Vf/vKX6pZbbunGWCgUCnNHrlREJT2Oiwp+FKUi7nHwwQd3r/5PkQhlAgTmu971rjPCTNuJd1SlYlrpEEebUtHmt5+LtLQpFU1/8X/33Xfv+qyq73//+9W97nWvXjzhCPuXXnpp19c8tEnnnHNOdfbZZ1fXXntt9+w8LrnkkmqttdZKYd2nqVRoy+D9/+Mf/0htY7gmFJDtt9++F0c/R+kg4Ab/+te/qu9+97spjZSXnOuuu65aZ511eukL53ebUpH7yf2uttpq1ZVXXtn1XVXHH398T5APP80wg5SKpnNtFKWCIz/ksoFvRgfmN77xjeoHP/jBjI5MisUBBxwwQwnK31GuVGy11Va9ezTv+ZnPfCb5+cIXvpCeHZS7XKkI/09/+tPnKyf/7//9v/R+uF//+tfds/Og7FI88niKK25UF2V0kVYqfMQqRR+Oj/knP/lJ9bOf/Sz1ZujdcV5l5kPUa9B76CFOA0qjv9/97pe0+fXWW69605veVL3zne9MPS8qtb///e/dVIxOs7EuFAqFHErFgx70oFQPtVXcozhhBykVz3zmM3vxv//97+9eaVcoKByEn9mkZxQn/mFKhevTTIe4Ntlkk+4dquqUU06ZKH5hDjvssG4sVbXF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bbHFFr18dOxck6a/rbbaqtX8r3Phj2MqXF418axbbrllz996661X1cpZ9+rcI1/td1UrSFWtxFXvec97kinc+3f3sLJfUC0kpry331EtTCUz2Mqsczkf+chHUhj7dBx88MHV+9///uqII45IpnJnQ/Mdj/LO7QnmO15//fW7Z/6H8KPEYY8lz8OM+DBGiW9SfGveU9PFHlfx3a+wwgrJNHrTn+81vsdaeE5+w22wwQbp/DBi75W4F1PnUM6f+MQnzri28sor92S+aeRLxKH81YpM+l0rt9VTnvKUVFZf85rXJLP70kHmVHd++tOfrp7//Oen55N/zN/bN6tWIpL8fNhhh6XtAD7wgQ+kZzn33HPTPl+veMUrqmWXXTa1A8qOb1h87s2/7/Pf//532ouNeWj5Qp62JYDyDumb9LmnqlTAPgKLL754ejEUAhkhwygYTTbccMPkb5gThwbRvgIyAY4J/W3+c7fMMsukikMDcMUVV1THHHNMemlLdPdHCKeiqbXFGedyV2v6ab8CL0Xl5SVDA3HOOeekzdympVzYj6JQKBQmIVcqcvfGN76x66OdplLR5lzXAKn3EA3PpEpF7vL7aDtsholJGrhJG8ScYXFM6x6ziSfCUhRe9KIX9fJS22h/HgLGy172suqlL31pco69l/Cnzdp4442TP5uBtvnzPggy9jTaeuute37CEWQiPgLLNIWxUaCcvf71r68e97jHpXITadHhZ58kitDJJ5+cFAntuHyRZhuv5nst4aMf/WgKS7nIEYfv593vfnf11a9+NZV3CivBn1JGMON23333nkJ11FFHpfy57LLLUl44/9rXvrZ617velX7biNR15Zx84z286lWvqi6//PIUniLredZdd90k7Imf8nbmmWem66DA2viV7OL6Lrvsku7j+9x+++3T5q/en3dJgFdOrrvuurTPmHzwHJ4Z0rTffvulskARJ4ySbeYS+RXvi1tppZWGdqiOq1REOZQ/ebhQKmBvrJAn5Zf/OqMxjXIsDk7nwhe/+MV0TCb9/Oc/nza/tfEu/P/4xz+eNv+lRFEGvYN//etfaaNJsuznPve59F+nhY1rf/rTn6Zr3vnXvva16uijj+5t4qws+O0+4uNffOHX/z/96U9pHzCKN7k20spNwtSVCrzuda+b8fI4H0M0RMFnPvOZkRSD3Nkob/PNN09aWmxS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" # buraya dönüştürdüğünüz kodu ekleyin

# Ana sayfadaki logo (logo.png)
MAIN_LOGO_BASE64 = "" # buraya dönüştürdüğünüz kodu ekleyin
# Şimdi logoyu ekleyelim
# Şimdi logoyu ekleyelim - Base64 kullanarak
col1, col2, col3 = st.columns([1, 2, 1])
with col2:
    display_logo_html(MAIN_LOGO_BASE64, width=700)
# Seitenkonfiguration
#st.set_page_config(page_title="ML Workflow ", layout="wide")

# Initialisierung von session_state Variablen, falls sie noch nicht existieren
if 'data' not in st.session_state:
    st.session_state.data = None
if "serialized_model" not in st.session_state:
    st.session_state.serialized_model = None
if "model_to_save" not in st.session_state:
    st.session_state.model_to_save = None    
if 'selected_columns' not in st.session_state:
    st.session_state.selected_columns = None
if 'sampled_data' not in st.session_state:
    st.session_state.sampled_data = None
if 'X_train' not in st.session_state:
    st.session_state.X_train = None
if 'X_test' not in st.session_state:
    st.session_state.X_test = None
if 'y_train' not in st.session_state:
    st.session_state.y_train = None
if 'y_test' not in st.session_state:
    st.session_state.y_test = None
if 'model' not in st.session_state:
    st.session_state.model = None
if 'predictions' not in st.session_state:
    st.session_state.predictions = None
if 'active_components' not in st.session_state:
    st.session_state.active_components = {
        "data_import": False,
        "data_visualization": False,
        "select_columns": False,
        "data_sampling": False,
        "modeling": False,
        "evaluation": False,
        "prediction": False 
    }

# Funktion zum Aktivieren eines bestimmten Workflow-Schritts
def activate_component(component_name):
    st.session_state.active_components = {k: False for k in st.session_state.active_components}
    st.session_state.active_components[component_name] = True
    st.rerun()
# Seitenleiste mit Workflow-Komponenten
st.sidebar.title("ML Workflow")
st.sidebar.write("Wählen Sie die Schritte für Ihren ML-Workflow aus")

# Komponenten in der Seitenleiste
components = {
    "data_import": "1. Daten importieren",
    "data_visualization": "2. Daten visualisieren",
    "select_columns": "3. Datenbereinigung",
    "data_sampling": "4. Daten-Sampling",
    "modeling": "5. Modellierung",
    "evaluation": "6. Modell-Evaluation",
    "prediction":"7. Prediction"
}

# Buttons für jeden Workflow-Schritt
for key, label in components.items():
    # Buttons nur aktivieren, wenn Voraussetzungen erfüllt sind
    disabled = False
    
    if key == "data_visualization" and st.session_state.data is None:
        disabled = True
    elif key == "select_columns" and st.session_state.data is None:
        disabled = True
    elif key == "data_sampling" and st.session_state.selected_columns is None:
        disabled = True
    elif key == "modeling" and st.session_state.sampled_data is None:
        disabled = True
    elif key == "evaluation" and (not 'models' in st.session_state or len(st.session_state.models) == 0):
        disabled = True
    elif key == "prediction" and (not 'models' in st.session_state or len(st.session_state.models) == 0):
        disabled = True    
    if st.sidebar.button(label, disabled=disabled, key=f"btn_{key}"):
        activate_component(key)

# Hauptbereich

# Funktion definiert von welchem Ort Datein importiert werden können
def liste_dateien():
    dateien = []
    pfad = '/app/data'
    for datei in os.listdir(pfad):
        if os.path.isfile(os.path.join(pfad,datei)):
            dateien.append(datei)
    return dateien              
    
# 1. Daten importieren
if st.session_state.active_components["data_import"]:
    st.header("1. Daten importieren")
    
    #HIER NOCH EIN BILD EINFÜGEN 
    #ODER EINE BESCHREIBUNG DER UNTERSCHIEDLICHEN DATENSÄTZE
    
    # Dateien zur Auswahl anbieten dockerized
    dateien = liste_dateien()
    datei_name = st.selectbox("Wähle eine Datei", dateien)
    
    if datei_name is not None:
        pfad = '/app/data'
        print("bin am zweiten pfad vorbeigekommen")
        datei_pfad = os.path.join(pfad, datei_name)
        df= pd.read_csv(datei_pfad)


        st.session_state.data = df
        st.rerun()
    # Option zum Hochladen einer CSV-Datei ohne docker container
    #data_option = st.radio(
    #    "Datenquelle auswählen",
    #    ["CSV-Datei hochladen"]
    #)
    
    #if data_option == "CSV-Datei hochladen":
    #    uploaded_file = st.file_uploader("Wählen Sie eine CSV-Datei", type="csv")
    #    if uploaded_file is not None:
    #        speichere_datei(uploaded_file, pfad)
    #        st.success("Daten erfolgreich geladen!")
            # Nach erfolgreicher Datenladung automatisch zum nächsten Schritt
    #        df = pd.read_csv(os.path.join(pfad, uploaded_file.name))
    #        st.session_state.data = df
    #        st.rerun()
        
    # Zeige die Daten an, wenn sie geladen sind
    if st.session_state.data is not None:
        st.write("Vorschau der Daten:")
        st.dataframe(st.session_state.data.head(10))
        st.write(f"Form: {st.session_state.data.shape[0]} Zeilen, {st.session_state.data.shape[1]} Spalten")
        
        # Button zum Fortfahren
        if st.button("Weiter zur Datenvisualisierung"):
            activate_component("data_visualization")
            st.experimental_rerun()

# 2. Daten visualisieren
elif st.session_state.active_components["data_visualization"]:
    st.header("2. Daten visualisieren")
    
    if st.session_state.data is not None:
        # Zwei Tabs für verschiedene Visualisierungsarten
        viz_tab1, viz_tab2 = st.tabs(["Scatter Plot", "Feature-Statistiken"])
        
        with viz_tab1:
            st.subheader("Scatter Plot")
            
            # Auswahl der Spalten für x und y
            numeric_columns = st.session_state.data.select_dtypes(include=['float64', 'int64']).columns.tolist()
            
            col1, col2, col3 = st.columns(3)
            with col1:
                x_col = st.selectbox("X-Achse", options=numeric_columns, index=0)
            with col2:
                y_col = st.selectbox("Y-Achse", options=numeric_columns, index=1 if len(numeric_columns) > 1 else 0)
            with col3:
                color_col = st.selectbox("Färben nach", options=st.session_state.data.columns)
            
            # Scatter Plot mit Plotly
            fig = px.scatter(
                st.session_state.data, 
                x=x_col, 
                y=y_col, 
                color=color_col,
                title=f"Scatter Plot: {x_col} vs {y_col}",
                labels={x_col: x_col, y_col: y_col},
                height=500
            )
            st.plotly_chart(fig, use_container_width=True)
            
        with viz_tab2:
            st.subheader("Feature-Statistiken")
            
            # Deskriptive Statistiken
            st.write("Deskriptive Statistiken")
            
            # Describe ile istatistikleri al ve virgülden sonra 2 rakam gösterecek şekilde biçimlendir
            desc_df = st.session_state.data.describe()
            
            # Tüm sayısal değerleri virgülden sonra 2 rakamla formatla
            formatted_df = desc_df.style.format("{:.2f}")
            
            # Tabloyu göster
            st.dataframe(formatted_df)
                # Button zum Fortfahren
        if st.button("Weiter zur Spaltenauswahl"):
            activate_component("select_columns")
            st.rerun()
    else:
        st.warning("Bitte laden Sie zuerst Daten.")
        if st.button("Zurück zum Datenimport"):
            activate_component("data_import")
            st.experimental_rerun()

# 3. Spalten auswählen
elif st.session_state.active_components["select_columns"]:
    st.header("3. Datenbereinigung")
    
    if st.session_state.data is not None:
        # Zeige alle verfügbaren Spalten an
        st.write("Verfügbare Spalten:")
        st.dataframe(pd.DataFrame({
            'Spaltenname': st.session_state.data.columns,
            'Datentyp': st.session_state.data.dtypes.values
        }))
        
        # Mehrfachauswahl für Features
        st.subheader("Features auswählen")
        feature_cols = st.multiselect(
            "Wählen Sie die Feature-Spalten aus:",
            options=[col for col in st.session_state.data.columns],
            default=[col for col in st.session_state.data.columns if col != 'target']
        )
        
        # Zielspaltenwahl
        st.subheader("Zielvariable auswählen")
        target_col = st.selectbox(
            "Wählen Sie die Zielspalte aus:",
            options=st.session_state.data.columns.tolist(),
            index=st.session_state.data.columns.get_loc('target') if 'target' in st.session_state.data.columns else 0
        )
        
        if st.button("Spalten übernehmen"):
            if not feature_cols:
                st.error("Bitte wählen Sie mindestens eine Feature-Spalte aus.")
            else:
                st.session_state.selected_columns = {
                    'features': feature_cols,
                    'target': target_col
                }
                st.success(f"{len(feature_cols)} Feature-Spalten und 1 Zielspalte ausgewählt!")
                
                # Zeige ausgewählte Spalten an
                selected_data = st.session_state.data[feature_cols + [target_col]]
                st.write("Vorschau der ausgewählten Spalten:")
                st.dataframe(selected_data.head())
                
                # Button zum Fortfahren
                if st.button("Weiter zum Daten-Sampling"):
                    activate_component("data_sampling")
                    st.experimental_rerun()
    else:
        st.warning("Bitte laden Sie zuerst Daten.")
        if st.button("Zurück zum Datenimport"):
            activate_component("data_import")
            st.experimental_rerun()

# 4. Daten-Sampling
elif st.session_state.active_components["data_sampling"]:
    st.header("4. Daten-Sampling")
    
    if st.session_state.selected_columns is not None:
        features = st.session_state.selected_columns['features']
        target = st.session_state.selected_columns['target']
        
        # Bereite Daten vor
        selected_data = st.session_state.data[features + [target]]
        
        # Optionen für Daten-Sampling
        st.subheader("Daten aufteilen")
        
        col1, col2 = st.columns(2)
        with col1:
            test_size = st.slider("Testdaten-Anteil (%)", 10, 50, 30) / 100
        with col2:
            random_state = st.number_input("Random State (für Reproduzierbarkeit)", 0, 100, 42)
            
        # Stratifiziertes Sampling bei Klassifikationsproblemen
        stratify_option = st.checkbox("Stratifiziertes Sampling", value=True)
        
        if st.button("Daten aufteilen"):
            X = selected_data[features]
            y = selected_data[target]
            
            # Prüfe, ob wir stratifizieren sollten
            stratify_val = y if stratify_option else None
            
            # Daten aufteilen
            X_train, X_test, y_train, y_test = train_test_split(
                X, y, test_size=test_size, random_state=random_state, stratify=stratify_val
            )
            
            # Speichere aufgeteilte Daten im Session State
            st.session_state.X_train = X_train
            st.session_state.X_test = X_test
            st.session_state.y_train = y_train
            st.session_state.y_test = y_test
            st.session_state.sampled_data = True
            
            # Zeige Zusammenfassung
            st.success("Daten erfolgreich aufgeteilt!")
            col1, col2 = st.columns(2)
            with col1:
                st.write(f"Trainingsdaten: {X_train.shape[0]} Beispiele")
                st.dataframe(pd.concat([X_train, y_train], axis=1).head())
            with col2:
                st.write(f"Testdaten: {X_test.shape[0]} Beispiele")
                st.dataframe(pd.concat([X_test, y_test], axis=1).head())
            
            # Zeige Verteilung der Klassen
            if y.dtype == 'object' or y.dtype == 'category':
                st.subheader("Klassenverteilung")
                col1, col2 = st.columns(2)
                with col1:
                    st.write("Training:")
                    train_dist = y_train.value_counts().reset_index()
                    train_dist.columns = [target, 'Anzahl']
                    train_fig = px.pie(train_dist, values='Anzahl', names=target, title="Trainingsdaten")
                    st.plotly_chart(train_fig, use_container_width=True)
                with col2:
                    st.write("Test:")
                    test_dist = y_test.value_counts().reset_index()
                    test_dist.columns = [target, 'Anzahl']
                    test_fig = px.pie(test_dist, values='Anzahl', names=target, title="Testdaten")
                    st.plotly_chart(test_fig, use_container_width=True)
                
                # Button zum Fortfahren
                if st.button("Weiter zur Modellierung"):
                    activate_component("modeling")
                    st.experimental_rerun()
    else:
        st.warning("Bitte wählen Sie zuerst die Spalten aus.")
        if st.button("Zurück zur Spaltenauswahl"):
            activate_component("select_columns")
            st.experimental_rerun()
# 5. Verbesserter Modellierungsabschnitt mit Orange-ähnlicher Funktionalität
elif st.session_state.active_components["modeling"]:
    st.header("5. Modellierung", divider="orange")
    
    if st.session_state.sampled_data:
        # Initialisiere ein Dictionary für mehrere Modelle, falls nicht vorhanden
        if 'models' not in st.session_state:
            st.session_state.models = {}
        
        # Informationsbereich: Trainingsstatistik
        st.info(f"Trainings-/Testdaten Split: {len(st.session_state.X_train)} Training / {len(st.session_state.X_test)} Test")
        
        # Dashboard für Trainingsstatistik
        st.write("#### Dataset-Statistik")
        col1, col2, col3 = st.columns(3)
        col1.metric("Trainingsdaten", f"{len(st.session_state.X_train)}")
        col2.metric("Testdaten", f"{len(st.session_state.X_test)}")
        col3.metric("Gesamtdatensatz", f"{len(st.session_state.data)}")
        
        # Zeige bereits trainierte Modelle an
        if st.session_state.models:
            st.subheader("Trainierte Modelle")
            model_df = pd.DataFrame([
                {
                    "Modell": model_id,
                    "Typ": model_info['type'],
                    "Parameter": str(model_info['params']),
                    "Datenpunkte": len(model_info['full_predictions']),
                    "Accuracy (Test)": f"{accuracy_score(st.session_state.y_test, model_info['test_predictions']):.4f}"
                }
                for model_id, model_info in st.session_state.models.items()
            ])
            st.dataframe(model_df, use_container_width=True)
        
        # Orange-Style Tabs für unterschiedliche Learner
        learner_tab = st.tabs(["Learner",])[0]
        
        with learner_tab:
            # Modellauswahl mit Orange-ähnlichem Styling
            model_type = st.radio(
                "Lernalgorithmus auswählen",
                ["k-Nearest Neighbors (kNN)", "Entscheidungsbaum (Tree)", "Logistische Regression"],
                horizontal=True
            )
            
            # Eindeutige Modell-ID generieren
            with st.form(key="model_form"):
                custom_model_name = st.text_input("Modellname (zur Identifikation)"
                          )
    
                
                # Hyperparameter basierend auf Modelltyp
                if model_type == "k-Nearest Neighbors (kNN)":
                    st.subheader("kNN Hyperparameter")
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        n_neighbors = st.slider("Anzahl der Nachbarn (k)", 1, 20, 3)
                    with col2:
                        weights = st.selectbox(
                            "Gewichtungsmethode",
                            options=["uniform", "distance"],
                            index=0,
                            help="'uniform': Alle Nachbarn gleich gewichtet, 'distance': Nach Abstand gewichtet"
                        )
                    with col3:
                        metric = st.selectbox(
                            "Distanzmetrik",
                            options=["euclidean", "manhattan", "chebyshev", "minkowski"],
                            index=0,
                            help="Metrik zur Berechnung der Distanz zwischen den Punkten"
                        )
                    
                    # Preprocessing-Optionen, wie in Orange
                    st.subheader("Preprocessing")
                    standardize = st.checkbox("Daten standardisieren (empfohlen für kNN)", value=True)
                    
                elif model_type == "Entscheidungsbaum (Tree)":
                    st.subheader("Entscheidungsbaum Hyperparameter")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        max_depth = st.slider("Maximale Tiefe", 1, 100, 100,
                                            help="Maximale Tiefe des Baums. 100 bedeutet praktisch unbegrenzt.")
                        min_samples_split = st.slider("Min. Samples für Split", 2, 20, 5)
                    with col2:
                        min_samples_leaf = st.slider("Min. Samples in Blättern", 1, 20, 2)
                        # Split-Kriterium seçeneğini kaldırıldı ve sabit değere ayarlandı
                        criterion = "gini"  # Daima "gini" olarak ayarlandı
                    
                    # Orange-spezifische Baumoptionen
                    binary_splits = st.checkbox("Binäre Splits erzwingen", value=True)
                    limit_depth = st.checkbox("Baumtiefe begrenzen", value=False)
                    if limit_depth:
                        max_depth = st.slider("Max. Tiefe", 1, 50, 10)
                    else:
                        max_depth = None
                    limit_majority = st.checkbox("Stop-Kriterium: Mehrheitsklasse", value=True)
                    if limit_majority:
                        majority_threshold = st.slider("Schwellenwert (%)", 50, 100, 95)
                    else:
                        majority_threshold = 100
                
                elif model_type == "Logistische Regression":  # Logistische Regression
                    st.subheader("Logistische Regression Hyperparameter")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        C = st.slider("Regularisierungsstärke C", 0.01, 10.0, 1.0, step=0.01,
                                    help="Kleinere Werte bedeuten stärkere Regularisierung")
                        solver = st.selectbox(
                            "Solver",
                            options=["lbfgs", "liblinear", "newton-cg", "sag", "saga"],
                            index=0
                        )
                    with col2:
                        penalty = st.selectbox(
                            "Regularisierung",
                            options=["l2", "l1", "elasticnet", "none"],
                            index=0,
                            help="Regularisierungstyp (abhängig vom gewählten Solver)"
                        )
                        max_iter = st.slider("Max. Iterationen", 100, 1000, 100, step=50)
                    
                    # Preprocessing-Optionen
                    st.subheader("Preprocessing")
                    standardize = st.checkbox("Daten standardisieren (empfohlen)", value=True)
                
                # Orange-Style: Validierungsoptionen
                st.subheader("Validation")
                validation_method = st.selectbox(
                    "Validierungsmethode",
                    options=["Test on Train Data", "Test on Test Data"],
                    index=0
                )
                
                # Modell-Training
                submit_button = st.form_submit_button("Modell anwenden")
                
                if submit_button:
                    model_name = custom_model_name
                    with st.spinner("Lernalgorithmus wird trainiert..."):
                        # Daten vorbereiten
                        X_train = st.session_state.X_train
                        y_train = st.session_state.y_train
                        X_test = st.session_state.X_test
                        y_test = st.session_state.y_test
                        
                        # Orange-Stil: Alle Daten zusammenfassen für komplette Vorhersagen
                        features = st.session_state.selected_columns['features']
                        target = st.session_state.selected_columns['target']
                        
                        # Gesamter Datensatz für vollständige Vorhersagen
                        X_full = st.session_state.data[features]
                        y_full = st.session_state.data[target]
                        
                        # Modellspezifische Verarbeitung und Training
                        if model_type == "k-Nearest Neighbors (kNN)":
                            # Standardisierung falls ausgewählt
                            if standardize:
                                scaler = StandardScaler()
                                X_train_scaled = scaler.fit_transform(X_train)
                                X_test_scaled = scaler.transform(X_test)
                                X_full_scaled = scaler.transform(X_full)
                                
                                # Umwandlung in DataFrame für spätere Verwendung
                                X_train_scaled = pd.DataFrame(X_train_scaled, columns=X_train.columns)
                                X_test_scaled = pd.DataFrame(X_test_scaled, columns=X_test.columns)
                                X_full_scaled = pd.DataFrame(X_full_scaled, columns=X_full.columns)
                            else:
                                X_train_scaled = X_train
                                X_test_scaled = X_test
                                X_full_scaled = X_full
                                scaler = None
                            
                            # Modell erstellen und trainieren
                            model = KNeighborsClassifier(n_neighbors=n_neighbors, weights=weights, metric=metric)
                            model.fit(X_train_scaled, y_train)
                            
                            # Vorhersagen
                            train_predictions = model.predict(X_train_scaled)
                            test_predictions = model.predict(X_test_scaled)
                            full_predictions = model.predict(X_full_scaled)
                            
                            # Modell-Metadaten
                            model_metadata = {
                                'type': 'kNN',
                                'instance': model,
                                'standardize': standardize,
                                'scaler': scaler,
                                'params': {'n_neighbors': n_neighbors, 'weights': weights, 'metric': metric},
                                'X_train_processed': X_train_scaled,
                                'X_test_processed': X_test_scaled,
                                'X_full_processed': X_full_scaled,
                            }
                            
                        elif model_type == "Entscheidungsbaum (Tree)":
                            # Modell erstellen und trainieren
                            tree_depth = max_depth if limit_depth else None
                            model = DecisionTreeClassifier(
                                max_depth=tree_depth,
                                criterion=criterion,
                                min_samples_split=min_samples_split,
                                min_samples_leaf=min_samples_leaf,
                                random_state=42
                            )
                            model.fit(X_train, y_train)
                            
                            # Vorhersagen
                            train_predictions = model.predict(X_train)
                            test_predictions = model.predict(X_test)
                            full_predictions = model.predict(X_full)
                            
                            # Modell-Metadaten
                            model_metadata = {
                                'type': 'DecisionTree',
                                'instance': model,
                                'standardize': False,
                                'params': {
                                    'max_depth': tree_depth,
                                    'criterion': criterion,
                                    'min_samples_split': min_samples_split,
                                    'min_samples_leaf': min_samples_leaf,
                                    'binary_splits': binary_splits,
                                    'majority_threshold': f"{majority_threshold}%" if limit_majority else "N/A"
                                },
                                'X_train_processed': X_train,
                                'X_test_processed': X_test,
                                'X_full_processed': X_full,
                            }
                            
                        else:  # Logistische Regression
                            # Standardisierung
                            if standardize:
                                scaler = StandardScaler()
                                X_train_scaled = scaler.fit_transform(X_train)
                                X_test_scaled = scaler.transform(X_test)
                                X_full_scaled = scaler.transform(X_full)
                                
                                # Umwandlung in DataFrame für spätere Verwendung
                                X_train_scaled = pd.DataFrame(X_train_scaled, columns=X_train.columns)
                                X_test_scaled = pd.DataFrame(X_test_scaled, columns=X_test.columns)
                                X_full_scaled = pd.DataFrame(X_full_scaled, columns=X_full.columns)
                            else:
                                X_train_scaled = X_train
                                X_test_scaled = X_test
                                X_full_scaled = X_full
                                scaler = None
                            
                            # Modell erstellen und trainieren
                            model = LogisticRegression(
                                C=C,
                                penalty=penalty,
                                solver=solver,
                                max_iter=max_iter,
                                random_state=42,
                                multi_class='auto'
                            )
                            model.fit(X_train_scaled, y_train)
                            
                            # Vorhersagen
                            train_predictions = model.predict(X_train_scaled)
                            test_predictions = model.predict(X_test_scaled)
                            full_predictions = model.predict(X_full_scaled)
                            
                            # Modell-Metadaten
                            model_metadata = {
                                'type': 'LogisticRegression',
                                'instance': model,
                                'standardize': standardize,
                                'scaler': scaler,
                                'params': {'C': C, 'penalty': penalty, 'solver': solver, 'max_iter': max_iter},
                                'X_train_processed': X_train_scaled,
                                'X_test_processed': X_test_scaled,
                                'X_full_processed': X_full_scaled,
                            }
                        
                        # Gemeinsame Modell-Speicherung für alle Typen
                        model_metadata.update({
                            'train_predictions': train_predictions,
                            'test_predictions': test_predictions,
                            'full_predictions': full_predictions,
                            'predictions': test_predictions,  # Für Kompatibilität mit altem Code
                            'y_full': y_full,  # Speichern der tatsächlichen Werte für den gesamten Datensatz
                            'y_train': y_train,
                            'y_test': y_test,
                            'validation_method': validation_method
                        })
                        
                        # Modell speichern
                        st.session_state.models[model_name] = model_metadata
                        
                        # Aktuelles Modell setzen für die Evaluation
                        st.session_state.current_model = model_name
                        
                        # Orange-Style Zusammenfassung
                        st.success(f"{model_type}-Modell '{model_name}' erfolgreich trainiert!")
                        
                        # Orange-Style: Zusammenfassung direkt nach dem Training anzeigen
                        acc_train = accuracy_score(y_train, train_predictions)
                        acc_test = accuracy_score(y_test, test_predictions)
                        
                        eval_col1, eval_col2 = st.columns(2)
                        eval_col1.metric("Trainingsgenauigkeit", f"{acc_train:.4f}")
                        eval_col2.metric("Testgenauigkeit", f"{acc_test:.4f}", 
                                       delta=f"{acc_test - acc_train:.4f}")
                        
                        # Bei Entscheidungsbäumen: Feature-Importance anzeigen
                        if model_type == "Entscheidungsbaum (Tree)":
                            st.subheader("Feature-Importance")
                            feature_importance = pd.DataFrame({
                                'Feature': X_train.columns,
                                'Importance': model.feature_importances_
                            }).sort_values('Importance', ascending=False)
                            
                            fig = px.bar(
                                feature_importance, 
                                x='Feature', 
                                y='Importance',
                                title=f"Feature-Importance des Entscheidungsbaums '{model_name}'"
                            )
                            st.plotly_chart(fig, use_container_width=True)
                        
                        if model_type == "Logistische Regression" and penalty != "none":
                            st.subheader("Koeffizienten")
                            coef_df = pd.DataFrame({
                                'Feature': X_train.columns,
                                'Koeffizient': model.coef_[0] if model.coef_.shape[0] == 1 else model.coef_.mean(axis=0)
                            }).sort_values('Koeffizient', ascending=False)
                            
                            fig = px.bar(
                                coef_df, 
                                x='Feature', 
                                y='Koeffizient',
                                title=f"Koeffizienten der Logistischen Regression '{model_name}'"
                            )
                            st.plotly_chart(fig, use_container_width=True)
      # Save Model Widget (Orange-Style)
    if st.session_state.models:
        save_expander = st.expander("Modell speichern (Save Model)", expanded=False)
        with save_expander:
            st.write("#### 💾 Modell für spätere Verwendung speichern")
            
            # Modell zum Speichern auswählen
            model_to_save = st.selectbox(
                "Modell zum Speichern auswählen",
                options=list(st.session_state.models.keys())
            )
            
            # Speicheroption
            if st.button("Modell exportieren"):
             import pickle

            # Tüm gerekli bilgileri içeren bir model paketi oluştur
             model_package = {
                'model': st.session_state.models[model_to_save]['instance'],
                'scaler': st.session_state.models[model_to_save].get('scaler', None),  # .get() metodu ile güvenli erişim
                'standardize': st.session_state.models[model_to_save].get('standardize', False),  # .get() metodu
                'feature_names': st.session_state.models[model_to_save]['X_train_processed'].columns.tolist()
            }

            # Tüm paketi serialize et
             st.session_state.serialized_model = pickle.dumps(model_package)
             st.session_state.model_to_save = model_to_save
            # Download-Button anzeigen
              # Eğer model export edildiyse, indirme butonunu göster
        if st.session_state.serialized_model:
            st.download_button(
                label="Modell herunterladen (.pkl)",
                data=st.session_state.serialized_model,
                file_name=f"{st.session_state.model_to_save}.pkl",
                mime="application/octet-stream"
            )

            st.success(f"Modell '{st.session_state.model_to_save}' kann jetzt heruntergeladen werden.")
            st.info("Dieses Modell kann später mit dem Prediction-Widget wieder geladen werden.")
                    # Button zum Fortfahren zur Evaluation
        if st.session_state.models:
            if st.button("Weiter zur Evaluation", type="primary"):
                activate_component("evaluation")
                st.rerun()
                
    else:
        st.warning("Bitte führen Sie zuerst das Daten-Sampling durch.")
        if st.button("Zurück zum Daten-Sampling"):
            activate_component("data_sampling")
            st.rerun()
# 6. Sadeleştirilmiş Model Değerlendirme (Test and Score)
elif st.session_state.active_components["evaluation"]:
    st.header("6. Modell-Evaluation", divider="orange")
    
    if st.session_state.models:
        # Ana sayfa bir sekmeli arayüz oluşturun: karşılaştırma ve detaylar
        main_tab1, main_tab2 = st.tabs(["Modell Vergleich", "Modell Details"])
        
        with main_tab1:
            st.subheader("Modellvergleich")
            
            # Karşılaştırılacak modelleri seçin - maksimum 2 model
            model_options = list(st.session_state.models.keys())
            
            col1, col2 = st.columns(2)
            with col1:
                model1 = st.selectbox("Modell 1", model_options, 
                                    index=0 if model_options else 0,
                                    key="model1_select")
            with col2:
                remaining_models = [m for m in model_options if m != model1]
                model2 = st.selectbox("Modell 2", 
                                    options=remaining_models,
                                    index=0 if remaining_models else 0,
                                    key="model2_select")
            
            if len(model_options) > 1:
                # Veri setiyle değerlendirme
                test_or_train = st.radio(
                    "Datensatz wählen",
                    ["Testdaten", "Trainingsdaten"],
                    horizontal=True
                )
                
                # Seçilen modeller hakkında bilgi alın
                model1_info = st.session_state.models[model1]
                
                if model2 in st.session_state.models:
                    model2_info = st.session_state.models[model2]
                    
                    # Doğru değerlendirme verilerini belirleyin
                    if test_or_train == "Testdaten":
                        X_data = st.session_state.X_test
                        y_true = st.session_state.y_test
                        y_pred1 = model1_info['test_predictions']
                        y_pred2 = model2_info['test_predictions']
                    else:
                        X_data = st.session_state.X_train
                        y_true = st.session_state.y_train
                        y_pred1 = model1_info['train_predictions']
                        y_pred2 = model2_info['train_predictions']
                    
                    # Kıyaslama metriklerini hesaplayın
                    metrics = {
                        "Genauigkeit (Accuracy)": [
                            accuracy_score(y_true, y_pred1),
                            accuracy_score(y_true, y_pred2)
                        ],
                         "Precision": [
                            precision_score(y_true, y_pred1, average='weighted', zero_division=0),
                            precision_score(y_true, y_pred2, average='weighted', zero_division=0)
                        ],
                        "Recall": [
                            recall_score(y_true, y_pred1, average='weighted', zero_division=0),
                            recall_score(y_true, y_pred2, average='weighted', zero_division=0)
                        ],
                        "F1-Score": [
                            f1_score(y_true, y_pred1, average='weighted', zero_division=0),
                            f1_score(y_true, y_pred2, average='weighted', zero_division=0)
                        ],
                    }
                    
                    # 1. Metrikleri görselleştirin
                    st.write("##### Performance-Metriken im Vergleich")
                    metrics_df = pd.DataFrame(metrics, index=[model1, model2]).T
                    st.dataframe(metrics_df.style.format("{:.4f}"), use_container_width=True)
                    
                    # 2. Metrikleri grafik olarak karşılaştırın
                    metrics_melted = pd.melt(
                        metrics_df.reset_index(),
                        id_vars='index',
                        var_name='Modell',
                        value_name='Wert'
                    )
                    metrics_melted['Wert'] = pd.to_numeric(metrics_melted['Wert'], errors='coerce')
                    metrics_melted = metrics_melted.dropna(subset=['Wert'])
                    fig = px.bar(
                        metrics_melted, 
                        x='index', 
                        y='Wert', 
                        color='Modell', 
                        barmode='group',
                        title="Modellvergleich",
                        labels={'index': 'Metrik', 'Wert': 'Wert'},
                        height=400
                    )
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # 3. Confusion Matrices
                    st.write("##### Confusion Matrices")
                    
                    cm_col1, cm_col2 = st.columns(2)
                    
                    with cm_col1:
                        st.write(f"**{model1}**")
                        cm1 = confusion_matrix(y_true, y_pred1)
                        classes = sorted(y_true.unique())
                        
                        fig1, ax1 = plt.subplots(figsize=(4, 3))
                        sns.heatmap(cm1, annot=True, fmt='d', cmap='Blues', 
                                xticklabels=classes, yticklabels=classes)
                        plt.title(f'Confusion Matrix - {model1}')
                        plt.ylabel('Tatsächliche Klasse')
                        plt.xlabel('Vorhergesagte Klasse')
                        st.pyplot(fig1)
                    
                    with cm_col2:
                        st.write(f"**{model2}**")
                        cm2 = confusion_matrix(y_true, y_pred2)
                        
                        fig2, ax2 = plt.subplots(figsize=(4, 3))
                        sns.heatmap(cm2, annot=True, fmt='d', cmap='Blues', 
                                xticklabels=classes, yticklabels=classes)
                        plt.title(f'Confusion Matrix - {model2}')
                        plt.ylabel('Tatsächliche Klasse')
                        plt.xlabel('Vorhergesagte Klasse')
                        st.pyplot(fig2)
                else:
                    st.warning("Bitte wählen Sie zwei verschiedene Modelle für den Vergleich aus.")
            else:
                st.warning("Sie benötigen mindestens zwei trainierte Modelle für einen Vergleich.")
        
        with main_tab2:
            st.subheader("Modelldetails")
            
            # Detaylı inceleme için model seçin
            detailed_model = st.selectbox(
                "Modell für detaillierte Analyse",
                options=model_options,
                index=0 if model_options else 0
            )
            
            if detailed_model:
                model_info = st.session_state.models[detailed_model]
                
                # Modeli yorumlayın
                st.write(f"##### {detailed_model} ({model_info['type']})")
                
                # Modelin parametrelerini göster
                st.write("**Parameter:**")
                params_df = pd.DataFrame([model_info['params']])
                st.dataframe(params_df.T.rename(columns={0: "Wert"}))
                
                # Veri setini seçin
                test_or_train_detail = st.radio(
                    "Datensatz für Detail-Analyse",
                    ["Testdaten", "Trainingsdaten"],
                    horizontal=True,
                    key="detail_data_choice"
                )
                
                # Doğru değerlendirme verilerini belirleyin
                if test_or_train_detail == "Testdaten":
                    X_data = st.session_state.X_test
                    y_true = st.session_state.y_test
                    y_pred = model_info['test_predictions']
                else:
                    X_data = st.session_state.X_train
                    y_true = st.session_state.y_train
                    y_pred = model_info['train_predictions']
                
                # Metrikler, Confusion Matrix ve Sınıflandırma Raporu için sekme
                det_tab1, det_tab2, det_tab3 = st.tabs(["Metriken", "Confusion Matrix", "Klassifikationsbericht"])
                
                with det_tab1:
                    # Detaylı metrikler
                    acc = accuracy_score(y_true, y_pred)
                    prec = precision_score(y_true, y_pred, average='weighted', zero_division=0)
                    rec = recall_score(y_true, y_pred, average='weighted', zero_division=0)
                    f1 = f1_score(y_true, y_pred, average='weighted', zero_division=0)
                    
                    col1, col2, col3, col4 = st.columns(4)
                    col1.metric("Accuracy", f"{acc:.4f}")
                    col2.metric("Precision", f"{prec:.4f}")
                    col3.metric("Recall", f"{rec:.4f}")
                    col4.metric("F1-Score", f"{f1:.4f}")
                
                with det_tab2:
                    # Confusion Matrix
                    cm = confusion_matrix(y_true, y_pred)
                    classes = sorted(y_true.unique())
                    
                    # Normalize option
                    normalize_cm = st.checkbox("Confusion Matrix normalisieren", value=False)
                    
                    # Plot Confusion Matrix
                    fig, ax = plt.subplots(figsize=(8, 6))
                    
                    if normalize_cm:
                        cm_norm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
                        sns.heatmap(cm_norm, annot=True, fmt='.2f', cmap='Blues', 
                                   xticklabels=classes, yticklabels=classes)
                        plt.title(f'Normalisierte Confusion Matrix - {detailed_model}')
                    else:
                        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', 
                                   xticklabels=classes, yticklabels=classes)
                        plt.title(f'Confusion Matrix - {detailed_model}')
                    
                    plt.ylabel('Tatsächliche Klasse')
                    plt.xlabel('Vorhergesagte Klasse')
                    st.pyplot(fig)
                
                with det_tab3:
                    # Sınıflandırma raporu
                    report = classification_report(y_true, y_pred, output_dict=True, zero_division=0)
                    report_df = pd.DataFrame(report).transpose()
                    
                    # Formatlamak
                    st.dataframe(report_df.style.format({
                        'precision': '{:.4f}',
                        'recall': '{:.4f}',
                        'f1-score': '{:.4f}',
                        'support': '{:.0f}'
                    }))
                
                # En iyi modeli önerebiliriz
                if test_or_train_detail == "Testdaten":
                    st.info(f"Hinweis: Um dieses Modell für Prediction zu verwenden, speichern Sie es bitte in der Modellierungskomponente.")
        
        # Navigation buttons
        st.markdown("---")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("Zurück zur Modellierung"):
                activate_component("modeling")
                st.rerun()
        
        with col2:
            if st.button("Weiter zur Prediction", type="primary"):
                activate_component("prediction")
                st.rerun()
    
    else:
        st.warning("Es wurden noch keine Modelle trainiert. Bitte gehen Sie zurück zum Modellierungs-Abschnitt.")
        if st.button("Zurück zur Modellierung"):
            activate_component("modeling")
            st.rerun()
        
        # Button zum Neustart
        if st.button("Workflow neu starten"):
            activate_component("data_import")
            st.rerun()
            
        # Button zur Rückkehr zur Modellierung
        if st.button("Zurück zur Modellierung (weitere Modelle trainieren)"):
            activate_component("modeling")
            st.rerun()
        if st.button("Weiter zur Prediction", type="primary"):
            activate_component("prediction")
            st.rerun()
        else:
         st.warning("Bitte trainieren Sie zuerst ein Modell.")
        if st.button("Zurück zur Modellierung"):
            activate_component("modeling")
# 7. Prediction Komponente (Orange-Style Modell-Laden Workflow)
elif st.session_state.active_components["prediction"]:
    st.header("7. Prediction", divider="orange")
    
    # Initialisierung des Session States für Prediction
    if 'loaded_models' not in st.session_state:
        st.session_state.loaded_models = {}
    if 'prediction_dataset' not in st.session_state:
        st.session_state.prediction_dataset = None
    
    # Hauptbereich für Prediction teilen
    col1, col2 = st.columns([1, 2])
    
    # Linke Spalte: Orange-Style Workflow (Modelle laden, Datei laden)
    with col1:
        st.subheader("Workflow")
        
        # Orange-Style Load Model Widget
        st.write("#### 📂 Load Model")
        
        # Modell 1 laden
        with st.expander("Modell 1 laden", expanded=True):
            load_model1 = st.file_uploader("Modell 1 (.pkl)", type="pkl", key="model1_uploader")
            if load_model1 is not None:
                try:
                    import pickle
                    model1 = pickle.load(load_model1)
                    # Verwende den originalen Dateinamen statt der generischen Bezeichnung
                    model_name = load_model1.name
                    st.session_state.loaded_models[model_name] = model1
                    st.success(f"Modell erfolgreich geladen: {model_name} ({type(model1).__name__})")
                except Exception as e:
                    st.error(f"Fehler beim Laden des Modells: {str(e)}")
        
        # Modell 2 laden
        with st.expander("Modell 2 laden", expanded=True):
            load_model2 = st.file_uploader("Modell 2 (.pkl)", type="pkl", key="model2_uploader")
            if load_model2 is not None:
                try:
                    import pickle
                    model2 = pickle.load(load_model2)
                    # Verwende den originalen Dateinamen statt der generischen Bezeichnung
                    model_name = load_model2.name
                    st.session_state.loaded_models[model_name] = model2
                    st.success(f"Modell erfolgreich geladen: {model_name} ({type(model2).__name__})")
                except Exception as e:
                    st.error(f"Fehler beim Laden des Modells: {str(e)}")
        
        # Orange-Style File Widget
      
        st.write("#### 📁 Datei aus Liste auswählen")

        dateien = liste_dateien()

        ausgewählte_datei = st.selectbox("Wähle eine Datei aus:", dateien)

        if ausgewählte_datei:
            dateipfad = os.path.join('/app/data', ausgewählte_datei)
            try:
                new_data = pd.read_csv(dateipfad)
                st.session_state.prediction_dataset = new_data
                st.success(f"Datensatz erfolgreich geladen: {new_data.shape[0]} Zeilen, {new_data.shape[1]} Spalten")
                st.dataframe(new_data.head())
            except Exception as e:
                st.error(f"Fehler beim Laden der Datei: {e}")
        
        # Orange-Style Select Columns Widget
        if st.session_state.prediction_dataset is not None:
            st.write("#### 🔍 Select Columns")
            with st.expander("Spalten auswählen", expanded=True):
                # Klassenvariable auswählen
                all_columns = st.session_state.prediction_dataset.columns.tolist()
                
                target_column = st.selectbox(
                    "Klassenvariable (Target)",
                    options=all_columns,
                    index=len(all_columns)-1 if len(all_columns) > 0 else 0
                )
                
                # Features auswählen
                feature_columns = st.multiselect(
                    "Features",
                    options=[col for col in all_columns if col != target_column],
                    default=[col for col in all_columns if col != target_column]
                )
                
                # In Session State speichern
                if st.button("Spalten übernehmen", key="select_cols_btn"):
                    st.session_state.prediction_columns = {
                        'target': target_column,
                        'features': feature_columns
                    }
                    st.success(f"Spaltenauswahl übernommen: {len(feature_columns)} Features und 1 Zielvariable")
    
    # Rechte Spalte: Predictions und Confusion Matrix
    with col2:
        # Überprüfen, ob alle Voraussetzungen erfüllt sind
        ready_for_prediction = (
            len(st.session_state.loaded_models) > 0 and 
            st.session_state.prediction_dataset is not None and
            'prediction_columns' in st.session_state
        )
        
        if ready_for_prediction:
            st.subheader("Modellvorhersagen")
            
            # Daten vorbereiten
            X_pred = st.session_state.prediction_dataset[st.session_state.prediction_columns['features']]
            y_true = st.session_state.prediction_dataset[st.session_state.prediction_columns['target']]
            
            # Modell für Vorhersage auswählen
            model_options = list(st.session_state.loaded_models.keys())
            selected_model_key = st.selectbox(
                "Modell für Vorhersage auswählen",
                options=model_options
            )
            
            selected_model = st.session_state.loaded_models[selected_model_key]
            
            # Orange-Style Predictions Widget
            st.write("#### 🔮 Predictions")
            
            with st.spinner("Berechne Vorhersagen..."):
                # Vorhersagen
                # Modeli pickle'dan çıkardığımızda yapısını kontrol et
                if isinstance(selected_model, dict):
                    # Model paketi yapısında
                    model = selected_model['model']
                    scaler = selected_model.get('scaler')
                    standardize = selected_model.get('standardize', False)
                    feature_names = selected_model.get('feature_names')
                    
                    # Aynı özellikleri kullan
                    if feature_names:
                        # Sadece gerekli sütunları seç ve doğru sırada kullan
                        missing_cols = [col for col in feature_names if col not in X_pred.columns]
                        if missing_cols:
                            st.error(f"Folgende Spalten fehlen: {', '.join(missing_cols)}")
                            st.stop()
                        
                        X_pred = X_pred[feature_names]
                    
                    # Standardizasyon uygula
                    if standardize and scaler:
                        X_pred_processed = scaler.transform(X_pred)
                        y_pred = model.predict(X_pred_processed)
                    else:
                        y_pred = model.predict(X_pred)
                else:
                    # Direkt model nesnesi
                    y_pred = selected_model.predict(X_pred)
                
                # Wahrscheinlichkeiten (falls verfügbar)
                proba_available = hasattr(selected_model, 'predict_proba')
                if proba_available:
                    y_proba = selected_model.predict_proba(X_pred)
                
                # Ergebnisse anzeigen
                results_df = X_pred.copy()
                results_df['Tatsächlich'] = y_true
                results_df['Vorhersage'] = y_pred
                results_df['Korrekt'] = results_df['Tatsächlich'] == results_df['Vorhersage']
                
                # Tab-Ansicht
                eval_tab , view_tab = st.tabs(["Evaluierung" , "Vorhersagen"])
                
                with eval_tab:
                    # Orange-Style Confusion Matrix Widget
                    st.write("#### 📊 Confusion Matrix")
                    
                    # Metriken berechnen
                    accuracy = accuracy_score(y_true, y_pred)
                    precision = precision_score(y_true, y_pred, average='weighted', zero_division=0)
                    recall = recall_score(y_true, y_pred, average='weighted', zero_division=0)
                    f1 = f1_score(y_true, y_pred, average='weighted', zero_division=0)
                    
                    # Metriken anzeigen
                    col1, col2, col3, col4 = st.columns(4)
                    col1.metric("Accuracy", f"{accuracy:.4f}")
                    col2.metric("Precision", f"{precision:.4f}")
                    col3.metric("Recall", f"{recall:.4f}")
                    col4.metric("F1-Score", f"{f1:.4f}")
                    
                    # Confusion Matrix
                    cm = confusion_matrix(y_true, y_pred)
                    classes = sorted(pd.Series(y_true).unique())
                    
                    # Normalisierte CM-Option
                    normalize_cm = st.checkbox("Confusion Matrix normalisieren", value=False)
                    
                    # Confusion Matrix visualisieren
                    fig, ax = plt.subplots(figsize=(8, 6))
                    
                    if normalize_cm:
                        cm_norm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
                        sns.heatmap(cm_norm, annot=True, fmt='.2f', cmap='Blues', 
                                  xticklabels=classes, yticklabels=classes)
                        # Titel mit Modellnamen anzeigen
                        plt.title(f'Normalisierte Confusion Matrix - {selected_model_key}')
                    else:
                        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', 
                                  xticklabels=classes, yticklabels=classes)
                        # Titel mit Modellnamen anzeigen
                        plt.title(f'Confusion Matrix - {selected_model_key}')
                    
                    plt.ylabel('Tatsächliche Klasse')
                    plt.xlabel('Vorhergesagte Klasse')
                    st.pyplot(fig)
                    
                    # Detaillierter Klassifikationsbericht
                    st.subheader("Klassifikationsbericht")
                    report = classification_report(y_true, y_pred, output_dict=True, zero_division=0)
                    report_df = pd.DataFrame(report).transpose()
                    
                    # Orange-Style formatierte Tabelle
                    st.dataframe(report_df.style.format({
                        'precision': '{:.4f}',
                        'recall': '{:.4f}',
                        'f1-score': '{:.4f}',
                        'support': '{:.0f}'
                    }))
                with view_tab:
                    # Anzeige-Optionen
                    display_options = st.radio(
                        "Anzeige filtern nach:",
                        ["Alle anzeigen", "Nur korrekte Vorhersagen", "Nur falsche Vorhersagen"],
                        horizontal=True
                    )
                    
                    # Daten filtern
                    if display_options == "Nur korrekte Vorhersagen":
                        filtered_df = results_df[results_df['Korrekt']]
                    elif display_options == "Nur falsche Vorhersagen":
                        filtered_df = results_df[~results_df['Korrekt']]
                    else:
                        filtered_df = results_df
                    
                    # Anzahl der anzuzeigenden Zeilen
                    num_rows = st.slider("Anzahl der anzuzeigenden Zeilen", 5, 100, 20)
                    
                    # Ergebnisse anzeigen
                    if len(filtered_df) > 0:
                        st.dataframe(filtered_df.head(num_rows), use_container_width=True)
                        st.info(f"Zeige {min(num_rows, len(filtered_df))} von {len(filtered_df)} Ergebnissen")
                    else:
                        st.warning(f"Keine Ergebnisse für den Filter '{display_options}'")   
        else:
            # Anleitung anzeigen, wenn nicht alles bereit ist
            st.info("#### 🔍 Anleitung für Predictions")
            st.write("""
            Um Vorhersagen wie in Orange durchzuführen, folgen Sie diesen Schritten:
            
            1. **Modelle laden**: Verwenden Sie die Funktion 'Load Model', um Ihre gespeicherten Modelle zu laden (.pkl-Format).
            2. **Datensatz laden**:  Laden Sie einen neuen Datensatz im .csv-Format hoch.
            3. **Spalten auswählen**: Spalten auswählen: Wählen Sie die Feature-Spalten und die Ziel-Spalte aus.
            4. **Vorhersagen**: Sobald alles geladen ist, werden die Vorhersagen berechnet und die Ergebnisse angezeigt
            5. **Evaluierung**: Die Confusion Matrix und andere Metriken helfen bei der Bewertung der Modellergebnisse
            """)
            
            missing_items = []
            if len(st.session_state.loaded_models) == 0:
                missing_items.append("- Mindestens ein Modell laden")
            if st.session_state.prediction_dataset is None:
                missing_items.append("- Einen neuen Datensatz laden")
            if 'prediction_columns' not in st.session_state and st.session_state.prediction_dataset is not None:
                missing_items.append("- Spalten auswählen und übernehmen")
            
            if missing_items:
                st.warning("Fehlende Elemente für Vorhersagen:")
                for item in missing_items:
                    st.markdown(item)
    # Funktionalität zum Speichern von Modellen (Save Model Widget Äquivalent)

    
    # Buttons für Navigation
    st.markdown("---")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("Zurück zur Modellierung"):
            activate_component("modeling")
        
            st.rerun()
           # Button zum Neustart
        if st.button("Workflow neu starten"):
            activate_component("data_import")
            st.rerun()
else:
    # Startseite
    #st.markdown("<h1 style='text-align: center;'>ML-Workflow</h1>", unsafe_allow_html=True)
    st.markdown("<h2 style='text-align: center;'>Willkommen bei der ML-Workflow-App</h2>", unsafe_allow_html=True)
    #st.markdown("<h3 style='text-align: center;'>Bitte wählen Sie in der Seitenleiste einen Schritt aus, um zu beginnen.</h3>", unsafe_allow_html=True)
    st.markdown("""
<div style='text-align: center; width: 100%;'>
    <p style='font-size: 1.2em;'>Diese App führt Sie durch einen typischen maschinellen Lernablauf.</p>
    <div style='display: inline-block; text-align: left; max-width: 800px;'>
        <p style='font-size: 1em;'>1. <strong>Daten importieren</strong>: Laden Sie Ihre eigenen Daten hoch oder verwenden Sie Beispieldaten</p>
        <p style='font-size: 1em;'>2. <strong>Daten visualisieren</strong>: Untersuchen Sie Ihre Daten mit Scatter Plots und Feature-Statistiken</p>
        <p style='font-size: 1em;'>3. <strong>Datenbereinigung</strong>: Wählen Sie Features und Zielvariablen aus</p>
        <p style='font-size: 1em;'>4. <strong>Daten-Sampling</strong>: Teilen Sie Ihre Daten in Trainings- und Testdaten auf</p>
        <p style='font-size: 1em;'>5. <strong>Modellierung</strong>: Trainieren Sie kNN- oder Entscheidungsbaum-Modelle</p>
        <p style='font-size: 1em;'>6. <strong>Evaluation</strong>: Bewerten Sie die Modellleistung mit Confusion Matrix und Metriken</p>
        <p style='font-size: 1em;'>7. <strong>Prediction</strong>: Unsere trainierten Modelle auf neuen Datensätzen validieren</p>
    </div>        
    <p style="font-weight: bold; font-size: 1em; margin-top: 15px; color: #007E92;">Beginnen Sie in der Seitenleiste auf "<span style="text-decoration: underline;">1. Daten importieren</span>" klicken.</p>
</div>
""", unsafe_allow_html=True)

    # Kurze Beschreibung der App
 # st.subheader("Über diese App")
  #  st.write("""
                                                                   
    
    # Beispiel-Workflow als Bild darstellen (optional)
    col1, col2, col3 = st.columns([1, 3, 1])
    with col2:
     display_logo_html(HEADER_LOGO_BASE64, width=700)
     